#include "opponentreal.h"
#include <QMutex>
#include "locker.h"
#include <QDebug>

OpponentReal::OpponentReal(int type, int id, const int &x, const int &y, int healthPercentage): Opponent(type, id, x ,y, healthPercentage)
{

    QObject::connect(this, SIGNAL(positionChanged()), this, SLOT(refreshPosition()));
    _isAlive = true;


}

void OpponentReal::activate() {


    this->start();
}

void OpponentReal::deactivate() {

    this->terminate();
}

void OpponentReal::redirectTo(int x, int y) {


    this->_pathFindingLocker.lock();
    this->_finder.findPath(this->getXPos(), this->getYPos(), x, y);
    this->_pathFindingLocker.unlock();
}

void OpponentReal::directToTarget()
{
    this->_pathFindingLocker.lock();
    this->_finder.findPath(this->getXPos(), this->getYPos(), this->_targetHero->getXPos(), this->_targetHero->getYPos());
    this->_pathFindingLocker.unlock();
}

bool OpponentReal::makeInjure(int value)
{
    if (!_isAlive) return false;

    _currentHealth -= value;

    if (_currentHealth <= 0) {

        this->terminate();
        _currentHealth = 0;
        _isAlive = false;

    } else {

    }

    int percentage = _currentHealth *100 / _totalHealth;
    this->setHealthPercentage(percentage);
    emit opponentInjured(this->getId(), percentage);

    return false;
}

void OpponentReal::setWorld(WorldView *world)
{
    this->_world = world;
    this->_finder.setWorld(world);
}

Hero *OpponentReal::getTargetHero()
{
    return _targetHero;
}

void OpponentReal::setTargetHero(Hero *hero)
{
    this->_targetHero = hero;
}


void OpponentReal::refreshPosition()
{
    this->setPos(QPoint(this->getXPos() * SCALE_FACTOR, this->getYPos() * SCALE_FACTOR));

    emit opponentMoved(this->getId(), this->getXPos(), this->getYPos());
}

void OpponentReal::run()
{

    while(1) {
        while (this->_finder._pathNodes.size() > 0) {

            this->_pathFindingLocker.lock();
            PathNode *node = this->_finder._pathNodes.last();
            this->_finder._pathNodes.pop_back();
            this->_pathFindingLocker.unlock();

            this->setXPos(node->x);
            this->setYPos(node->y);



            QMutex *mutex = Locker::getLocker();
            mutex->lock();
            emit positionChanged();
            mutex->unlock();
            this->msleep(500);

            if (this->_finder._pathNodes.size() < 4) {
                if (_targetHero != nullptr)
                    emit injureHero(this->_targetHero->getId(), 20);
            }

        }
         this->msleep(500);

        if (_targetHero != nullptr)
            emit injureHero(this->_targetHero->getId(), 20);
    }



}
