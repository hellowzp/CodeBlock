#include "heroreal.h"
#include "mainwindow.h"
#include <QDebug>
#include "gift.h"

HeroReal::HeroReal(int role, int id, int x, int y, int healthPercentage, int magicPercentage): Hero(role, id, x, y, healthPercentage, magicPercentage)
{

    this->_healthValue = healthPercentage * _totalHealth / 100;
    this->_magicValue = magicPercentage * _totalMagic / 100;

    QObject::connect(this, SIGNAL(needToMove()), this, SLOT(moveOneStep()));

    _sword = false;
    _armor = false;
    _boot = false;
}


void HeroReal::run(){

    while (true) {

        int speed = (_boot ? (_speed / 2) : _speed );

        this->msleep(100 + 1000 / speed);
        emit needToMove();
    }
}

void HeroReal::faceToDirection(int d) {

    this->_facingDir = d;
}

void HeroReal::startMoving(){

    this->start();
}

void HeroReal::stopMoving(){

    this->terminate();

    emit heroMovingStoped(this->getId());  //to game client
    emit needToRepathOpponents(this->getId()); // to world view
}

void HeroReal::moveOneStep() {

    int nextX;
    int nextY;

    switch (_facingDir) {
    case 1:
        nextX = this->getXPos();
        nextY = this->getYPos() - 1;
        break;
    case 2:
        nextX = this->getXPos() + 1;
        nextY = this->getYPos() - 1;
        break;
    case 3:
        nextX = this->getXPos() + 1;
        nextY = this->getYPos();
        break;
    case 4:
        nextX = this->getXPos() + 1;
        nextY = this->getYPos() + 1;
        break;
    case 5:
        nextX = this->getXPos();
        nextY = this->getYPos() + 1;
        break;
    case 6:
        nextX = this->getXPos() - 1;
        nextY = this->getYPos() + 1;
        break;
    case 7:
        nextX = this->getXPos() - 1;
        nextY = this->getYPos();
        break;
    case 8:
        nextX = this->getXPos() - 1;
        nextY = this->getYPos() - 1;
        break;
    default:
        break;
    }

    this->setXPos(nextX);
    this->setYPos(nextY);
    this->setPos(this->getXPos() * SCALE_FACTOR, this->getYPos() * SCALE_FACTOR);

    emit heroMoved(this->getId(), this->getXPos(), this->getYPos()); // to game client
    emit needToRepathOpponents(this->getId());

    for (Gift *gift : this->_world->_gifts) {

        if (this->getXPos() == gift->getXPos()) {

            if (this->getYPos() == gift->getYPos()) {

                qDebug() << "Hero : steped on a gift " << gift->getXPos() << " " << gift->getYPos();
                emit giftPicked(this->getId(), gift->getId(), gift->getType());

                break;
            }
        }
    }
}

void HeroReal::injureHero(int value)
{
    //the harm will be halfed if hero wears a armor
    if (_armor) value /= 2;

    _healthValue -= value;
    if (_healthValue <= 0) {

        _healthValue = 0;
    }

    int percentage = _healthValue * 100 / _totalHealth;
    this->setHealthPercentage(percentage);

    emit heroInjured(this->getId(), percentage);
}

void HeroReal::equipmentChanged(bool sword, bool armor, bool boot)
{
    _sword = sword;
    _armor = armor;
    _boot = boot;

    qDebug() << "Hero : equipment changed " << _sword << " " << _armor << " " << _boot;
}

void HeroReal::releaseMagicAt(int x, int y)
{
    if (!this->getMagic().isRunning()) {
        this->getMagic().releaseAt((_sword ? 1 : 0), x, y);
        emit magicReleased(this->getId(), (_sword ? 1 : 0), x, y);
    }
}


int HeroReal::getHealthPercentage()
{
    return _healthValue * 100 / _totalHealth;
}

int HeroReal::getMagicPercentage() {

    return _magicValue * 100 / _totalMagic;
}
