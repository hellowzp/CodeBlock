#include "heroreal.h"
#include "mainwindow.h"

HeroReal::HeroReal(int role, int id, int x, int y, int healthPercentage, int magicPercentage): Hero(role, id, x, y, healthPercentage, magicPercentage)
{

    this->_healthValue = healthPercentage * _totalHealth / 100;
    this->_magicValue = magicPercentage * _totalMagic / 100;

    QObject::connect(this, SIGNAL(needToMove()), this, SLOT(moveOneStep()));
}


void HeroReal::run(){

    while (true) {

        this->msleep(100 + 1000 / _speed);
        emit needToMove();
    }


}

void HeroReal::faceToDirection(int d) {

    this->_facingDir = d;

    switch (_facingDir) {
    case 1:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(270)));
        break;
    case 2:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(315)));
        break;
    case 3:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(0)));
        break;
    case 4:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(45)));;
        break;
    case 5:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(90)));
        break;
    case 6:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(135)));
        break;
    case 7:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(180)));
        break;
    case 8:
        this->setPixmap(QPixmap(":/world/angry-bird-icon.png").transformed(QTransform().rotate(225)));
        break;
    default:
        break;
    }
}

void HeroReal::startMoving(){

    this->start();
}

void HeroReal::stopMoving(){

    this->terminate();

    emit heroMovingStoped(this->getId());  //to game client
    emit needToRepathOpponents(); // to world view
}

void HeroReal::moveOneStep() {

    switch (_facingDir) {
    case 1:
        this->moveToPoint(this->getXPos(), this->getYPos() - 1);
        break;
    case 2:
        this->moveToPoint(this->getXPos() + 1, this->getYPos() - 1);
        break;
    case 3:
        this->moveToPoint(this->getXPos() + 1, this->getYPos());
        break;
    case 4:
        this->moveToPoint(this->getXPos() + 1, this->getYPos() + 1);
        break;
    case 5:
        this->moveToPoint(this->getXPos(), this->getYPos() + 1);
        break;
    case 6:
        this->moveToPoint(this->getXPos() - 1, this->getYPos() + 1);
        break;
    case 7:
        this->moveToPoint(this->getXPos() - 1, this->getYPos());
        break;
    case 8:
        this->moveToPoint(this->getXPos() - 1, this->getYPos() - 1);
        break;
    default:
        break;
    }
}

void HeroReal::moveToPoint(int x, int y) {

    this->setXPos(x);
    this->setYPos(y);
    this->setPos(this->getXPos() * SCALE_FACTOR, this->getYPos() * SCALE_FACTOR);

    emit heroMoved(this->getId(), x, y); // to game client

}

int HeroReal::getHealthPercentage()
{
    return _healthValue * 100 / _totalHealth;
}

int HeroReal::getMagicPercentage() {

    return _magicValue * 100 / _totalMagic;
}
