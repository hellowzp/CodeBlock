#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>

#include "coordinator.h"
#include "mymqtt.h"
#include <sys/select.h>
#include <sys/time.h>
#include <pthread.h>

int up_stream_pipe[2];
int down_stream_pipe[2];

String co_inbuf;
String co_outbuf;
int tty_fds;

int CHILD_RESTART;  


void init() {
	CHILD_RESTART = -1;
}

void child_exit(int signo) {
	printf("signal %d %s\n",signo,"child begin to exit...");
	exit(EXIT_FAILURE);
}

void child_cleanup() {
	printf("%s\n","child clean up before exit..");
}

void coordinator_tty_read() {
	
	int bytes = 0;
	bytes = tty_serial_read(tty_fds,co_inbuf);
	printf("received frame length: %d %d %d %d %d\n",bytes,co_inbuf[2],co_inbuf[co_inbuf[2]+3],co_inbuf[5],co_inbuf[6]);
	mqtt_ptr_t mydata = xbee_data_read(&co_inbuf[3],bytes-4); //only the data section, excluding checksum
	if(mydata) {      
		Byte nbytes = sizeof(*mydata) + mydata->len;   //actual data bytes
		void* bytestream = malloc(nbytes+1);
		*(Byte*)bytestream = nbytes;		
		memcpy(bytestream+1, mydata, sizeof(*mydata));
		memcpy(bytestream+sizeof(*mydata)+1, mydata->msg, mydata->len);		
		write(up_stream_pipe[1], bytestream, nbytes+1);
		free(mydata);
		free(bytestream);
	}
		
	/*
	int logfds = open("./rdesclog.txt", O_CREAT | O_RDWR | O_APPEND);
	int ret = 0, leng = bytes;
	String fbuf = co_inbuf;
	while (leng>0 && (ret=write(logfds,fbuf,leng))!=0) {
		if(ret==-1) {
			if(errno==EINTR)
				continue;
			perror("wrinting to log file");
		}
		leng -= ret;
		fbuf += ret;
	}
	if(close(logfds)==-1) perror("close log file");	
	*/
}

void coordinator_pipe_read() {
	Byte bytes = 0;
	read(down_stream_pipe[0],&bytes,1);
	if(bytes<=sizeof(MQTT)) {
		printf("%s \n","mqtt data too short...");
		return ;
	}
	mqtt_ptr_t mqtt = malloc(sizeof(*mqtt));
	void* data =  malloc(bytes-sizeof(*mqtt));
	read(down_stream_pipe[0],mqtt,sizeof(*mqtt));
	read(down_stream_pipe[0], data, bytes-sizeof(*mqtt));
	//mqtt->msg = data;
	
	if(mqtt->len != *(Byte*)data) {
		printf("%s\n","unmatched length field...");
		return ;
	}
	
	uint64_t address = mqtt->addr;
	String mac_addr = malloc(8);
	int i;
	for(i=0; i<8; i++) {
		mac_addr[7-i] = address%256;
		address /= 256;
	}
	char ntw_addr[2] = {0xFF,0xFE};
	String RFData = (String)data;	
	//memcpy(RFData,mqtt->msg,mqtt->len);
	
	bytes = xbee_txReq_frame_assemble(mac_addr,ntw_addr,0,0,RFData,mqtt->len);

	/*
	int logfds = open("./wresclog.txt", O_CREAT | O_RDWR | O_APPEND);
	int ret = 0;
	leng = bytes;
	String fbuf = co_outbuf;
	while (leng>0 && (ret=write(logfds,fbuf,leng))!=0) {
		if(ret==-1) {
			if(errno==EINTR)
				continue;
			perror("wrinting to log file");
		}
		leng -= ret;
		fbuf += ret;
	}
	if(close(logfds)==-1) perror("close log file");	
	*/
	
	bytes = tty_serial_write(tty_fds,co_outbuf,bytes);
	printf("write %d bytes... %d\n",bytes,RFData[0]);
	
	free(data);
	free(mqtt);
	free(mac_addr);
	//free(RFData);
}


void parent_read_callback(int signo) {
	char buf[20];
	printf("%s %d\n","data available, parent begin to read...",signo);
	
	Byte bytes = 0;
	read(up_stream_pipe[0],&bytes,1);
	if(bytes<=sizeof(MQTT)) {
		printf("%s %d bytes\n","mqtt data too short...",bytes);
		return ;
	}
	mqtt_ptr_t mqtt = malloc(sizeof(*mqtt));
	void* data =  malloc(bytes-sizeof(*mqtt));
	read(up_stream_pipe[0],mqtt,sizeof(*mqtt));
	read(up_stream_pipe[0], data, bytes-sizeof(*mqtt));
	mqtt->msg = data;
			
	//int bytes = read(up_stream_pipe[0],buf,20);
	printf("parent receive data: %s, %d bytes, signal: %d\n",buf,bytes+1,signo);	
}

void child_read_callback(int signo) {
	char buf[17];
	printf("%s %d\n","data available, child begin to read...",signo);
	int bytes = read(down_stream_pipe[0],buf,17);
	printf("child receive data: %s, %d bytes signal: %d\n",buf,bytes,signo);	
	write(up_stream_pipe[1],"hello from child",16);
}

void child_run(int signo) {
	
	CHILD_RESTART++;
	if(CHILD_RESTART) {   //just set at first time if case of error like when closing already closed fds
		//signal(SIGIO,SIG_IGN);
		close(up_stream_pipe[0]);    //parent only read from up stream
		close(down_stream_pipe[1]);  //parent only write to down stream
	}
	
	pipe(up_stream_pipe);
	pipe(down_stream_pipe);

	//signal(SIGIO,SIG_IGN);
	
	pid_t pid = fork();
	if(pid<0) {
		printf("%s\n","fail to folk...");
	} else if(pid>0) {
		
		//if(!CHILD_RESTART) {   //just set at first time if case of error like when closing already closed fds
			close(up_stream_pipe[1]);    //parent only read from up stream
			close(down_stream_pipe[0]);  //parent only write to down stream
			
			int status_flag = fcntl(up_stream_pipe[0],F_GETFL);
			fcntl(up_stream_pipe[0], F_SETFL, status_flag | O_NONBLOCK);	

			status_flag = fcntl(down_stream_pipe[1],F_GETFL);
			fcntl(down_stream_pipe[1], F_SETFL, status_flag | O_NONBLOCK);

			fcntl(up_stream_pipe[0], F_SETOWN, getpid());				
			//signal(SIGIO,parent_read_callback);	
			signal(SIGIO,SIG_IGN);
			
			signal(SIGCHLD,child_run);
			signal(SIGPIPE,child_run);
		//}
		
		char c = 0;
		while(1) {
			read(STDIN_FILENO,&c,1);
			if(c=='q') {             //kill the child
				kill(pid,SIGUSR1);
			}
			if(c=='s') {
				printf("%s %d\n","parent begin to sending hello...",down_stream_pipe[1]);
				int bytes = write(down_stream_pipe[1],"hello from parent",17);
				printf("parent write %d bytes\n",bytes);
			}
			if(c=='k') {
				kill(pid,SIGSEGV);
			}
			
			parent_read_callback(0);
			//sleep(5);

		}
			
	} else {
		printf("%s\n","new child started...");
		atexit(child_cleanup);

		//tty_serial_init();
		close(up_stream_pipe[0]);    
		close(down_stream_pipe[1]); 
		
		int status_flag = fcntl(down_stream_pipe[0],F_GETFL);
		fcntl(down_stream_pipe[0], F_SETFL, status_flag | O_NONBLOCK);

		status_flag = fcntl(up_stream_pipe[1],F_GETFL);
		fcntl(up_stream_pipe[1], F_SETFL, status_flag | O_NONBLOCK);

		//fcntl(down_stream_pipe[0], F_SETOWN, getpid());		
		//signal(SIGIO,child_read_callback);

		//signal(SIGSEGV,child_exit);    //block here..
		signal(SIGUSR1,child_exit);
		
		while(1) {
			//coordinator_tty_read();
			//coordinator_pipe_read();
			sleep(5);
		}
	}
}

int main() {
	
	init();
	
	
	
	
	
	child_run(0);
	
	return 0;
}

