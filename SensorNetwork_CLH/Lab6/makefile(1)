###########################
# Configuration Variables #
###########################

# list of all executables that need to be compiled, you should have .c files with these names
EXE = my_demo_app
# all shared libraries will be copied in this directory
LDIR = lib
# all intermediate files (e.g. .o files) will be located in this folder
TMPDIR = tmp
# compiler command
CC = gcc
# basic gcc flags for compiling executables
# you might add $$(mysql_config --cflags) when using mysql connection (mind the double $$)
CFLAGS = -Wall -c 
# basic gcc flags for linking executables
# you might add $$(mysql_config --libs) when using mysql connection (mind the double $$)
LFLAGS = -Wall -L./$(LDIR) -Wl,-rpath=./$(LDIR) 
# basic gcc flags for compiling shared libraries
CDFLAGS = -Wall -c -fPIC 
# basic gcc flags for linking shared libraries
LDFLAGS = -Wall -shared 

# color tags for creating nice console output
TITLE_COLOR = \033[33m
NO_COLOR = \033[0m
.SUFFIXES:

###########
# Targets #
###########

# Main target when executing make. Compile all files listed in the EXE variable
all: $(EXE)

# When trying to compile one of the executables, first look for its .o file (in the tmp folder)
# Then check if the libraries are in the lib folder
# % is a wildcard : e.g. my_demo_app will look for temp/my_demo_app.o
$(EXE) : % : $(TMPDIR)/%.o $(LDIR)/liblist.so $(LDIR)/libmyqueue.so
	@echo "$(TITLE_COLOR)\n***** LINKING $< *****$(NO_COLOR)"
#when all dependencies were ok, link the executable
	$(CC) $< -llist -lmyqueue -o $@ $(LFLAGS)

# If you only want to compile one of the libs, this target will match (e.g. make liblist)
liblist libmyqueue : % : $(LDIR)/%.so

# When a certain .o file is not found in the tmp folder, compile it from the .c file, and do a cppcheck
# % is a wildcard : e.g. when compiling tmp/gateway.o he will look for gateway.c
$(TMPDIR)/%.o : %.c %.check
	@echo "$(TITLE_COLOR)\n***** COMPILING $< *****$(NO_COLOR)"
# make the tmp folder if it is not there
	mkdir -p $(TMPDIR)
# Compile ! (mind that $@ is holding $(TMPDIR)/%.o so it will end up in the tmp folder)
	$(CC) $(CFLAGS) -o$@ $< 

# When a lib needs to be compiled, this target will do the job
$(LDIR)/lib%.so : %.c %.check
# Extract the lib name (e.g. liblist.so will look for list.c, so we store 'list' in the variable 'name')
	$(eval name = $(basename $<))
	@echo "$(TITLE_COLOR)\n***** COMPILING LIB $< *****$(NO_COLOR)"
	mkdir -p $(TMPDIR)
# Compile the lib to the tmp folder
	$(CC) $(CDFLAGS) -o$(TMPDIR)/$(name).o $< 
	mkdir -p $(LDIR)
	@echo "$(TITLE_COLOR)\n***** LINKING LIB $< *****$(NO_COLOR)"
# Link the .o file from the tmp folder to an .so file in the lib folder
	$(CC) $(TMPDIR)/$(name).o -o $(LDIR)/lib$(name).so $(LDFLAGS)

# do not look for files called clean, clean-all or *.check this will be always a target
.PHONY : clean clean-all *.check

%.check : %.c
	@echo "$(TITLE_COLOR)\n***** CPPCHECK $< *****$(NO_COLOR)"
	cppcheck --enable=all $^

clean:
	rm -rf *.o $(EXE) *~ $(TMPDIR)

clean-all: clean
	rm -rf $(LDIR)
	

###
#
# Info on automatic variables :
# $@ : The name of the target of the rule (first part, before the colon)
# $< : The name of the first prerequisite (first dependency, after the colon)
# $^ : The names of all the prerequisites (everything after the colon)
#
###